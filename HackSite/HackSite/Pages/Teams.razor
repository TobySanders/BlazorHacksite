@page "/Teams"

@using HackSite.Controllers
@using HackSite.Views
@inject TeamsController TeamsController
@inject ProjectsController ProjectsController

<h1>Teams and Projects</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (teamViews == null || projectViews == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h2>Teams</h2>
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Projects</th>
                <th>Username</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var team in teamViews)
            {
                <tr>
                    <td>
                        <a href="Teams/{@team.Id}">@team.Name</a>
                    </td>
                    <td>@team.Projects.FirstOrDefault()?.Title</td>
                    <td>@team.Members.FirstOrDefault()?.Username</td>
                </tr>
            }
        </tbody>
    </table>

    <h2>Projects</h2>
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Description</th>
                <th>RepositoryUrl</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var project in projectViews)
            {
                <tr>
                    <td>
                        <a href="/Projects/{@project.Id}">@project.Title</a>
                    </td>
                    <td>@project.Description</td>
                    <td>@project.RepositoryUrl</td>
                </tr>
            }
        </tbody>
    </table>

    <div>
        <button @onclick="MakeTeam">Make Team!</button>
        <button @onclick="AddProjectToTeam">Add Project!</button>
        <button @onclick="Refresh">Refresh!</button>
    </div>

}

@code {

    private TeamView[] teamViews;
    private ProjectView[] projectViews;

    protected override async Task OnInitializedAsync()
    {
        teamViews = await TeamsController.GetTeamsAsync();
        projectViews = await ProjectsController.GetProjectsAsync();
    }

    public async Task MakeTeam()
    {
        await TeamsController.AddTeamAsync("Hello World");
        await Refresh();
    }
    public async Task Refresh()
    {
        teamViews = await TeamsController.GetTeamsAsync();
        projectViews = await ProjectsController.GetProjectsAsync();
    }
    public async Task AddProjectToTeam()
    {
        var subject = teamViews[1];
        var project = await ProjectsController.GetProjectAsync(Guid.Parse("891f1907-dbfc-461e-a67f-b52755da2251"));
        subject.Projects.Add(project);
        await TeamsController.UpdateTeamAsync(subject);
        await Refresh();
    }
}
